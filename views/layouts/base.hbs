<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/_css/alternateRowsTable.css" rel="stylesheet" >
    <title>Currency and Country Mapping</title>
</head>
<body>
<a id="top"></a>
<a href="#bottom" class="btn btn-info">Goto BOTTOM</a>
<t></t>
<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th,
    td {
        padding: 8px;
        text-align: left;
        border: 1px solid #ddd;
    }

    /* Style for even rows */
    tr:nth-child(even) {
        background-color: #949393;
    }

    /* Style for odd rows */
    tr:nth-child(odd) {
        background-color: #d15ea1;
    }

    /* Optional: Highlight the first row */
    tr:first-child {
        background-color: #91f991;
    }

    tr:nth-child(20n) {
      background-color: #ffcc00; /* Highlight every 20th row with yellow */
      font-weight: bold; /* Make text bold */
    }

        /* Scroll anchor styles (Optional) */
    #top, #bottom {
      margin-top: 20px;
      padding: 20px;
      background-color: #f1f1f1;
      text-align: center;
      font-size: 18px;
    }

    .pagination-anchors {
      display: flex;
      justify-content: space-between;
      margin-top: 10px;
    }
</style>

<h5>SCHEMA</h5>
    currency_id, currency_name, alpha2,CallingCodes, alpha3, ioc, symbol
    <p></p>
    emoji_iso2, emoji_iso3, emoji_code
    <p></p>
    region_id, region_alpha2
    <p></p>
    region_country_id, region_name, country_iso2
    <p></p> 
    Latlng_id, country_name, alpha2, alpha3, CallingCodes, lat, lng
    <p></p> 
    
    <div><h5>MENU</h5>
        <t></t>
        <a href="/currencies" class="btn btn-primary">All Currencies</a>
        <t></t>
         <a href="/currencies/create" class="btn btn-secondary">Add Currency</a>
        <t></t>
        <a href="/currencies/regions" class="btn btn-info">All Regions</a>
        <t></t>
        <a href="/currencies/regionsCountries" class="btn btn-info">All Regions with Countries</a>
        <t></t>
        <!--
        <a href="/currencies/regionsCountriesCreate" class="btn btn-secondary">Create Region and Country Mapping</a>
        <t></t>
        -->
        <a href="/currencies/latlngs" class="btn btn-info">All Countries with Latitude and Longitude</a>
        <t></t>
        <a href="/currencies/showloggings" class="btn btn-info">Show Loggings</a>
        <t></t>
        <p></p>
    </div>

    <div class="container">
    {{#block "content"}}{{/block}}
    </div>
    <div><h5>MENU</h5>
        <t></t>
        <a href="/currencies" class="btn btn-primary">All Currencies</a>
        <t></t>
         <a href="/currencies/create" class="btn btn-secondary">Add Currency</a>
        <t></t>
        <a href="/currencies/regions" class="btn btn-info">All Regions</a>
        <t></t>
        <a href="/currencies/regionsCountries" class="btn btn-info">All Regions with Countries</a>
        <t></t>
        <!--
        <a href="/currencies/regionsCountriesCreate" class="btn btn-secondary">Create Region and Country Mapping</a>
        <t></t>
        -->
        <a href="/currencies/latlngs" class="btn btn-info">All Countries with Latitude and Longitude</a>
        <t></t>
        <a href="/currencies/showloggings" class="btn btn-info">Show Loggings</a>
        <t></t>
        <p></p>
    </div>
    <a href="#top" class="btn btn-info">Goto TOP</a>
    <t></t>
    <a id="bottom"></a>

    <script>
        // Add anchors dynamically to every 20th row
        const tableRows = document.querySelectorAll("#CurrencyTable tbody tr");

            tableRows.forEach((row, index) => {
                if ((index + 1) % 20 === 0) {  // For every 20th row (index starts from 0)
                    const td = row.cells[0];  // First cell in the row
                    const anchorTop = document.createElement("a");
                    anchorTop.href = "#top";
                    anchorTop.textContent = "Top";
                    td.appendChild(anchorTop);

                    const td2 = row.cells[1];  // Second cell in the row
                    const anchorBottom = document.createElement("a");
                    anchorBottom.href = "#bottom";
                    anchorBottom.textContent = "   Bottom   ";
                    td.appendChild(anchorBottom);

                    // Add Previous 20 Rows link in the first column
                    const previousAnchor = document.createElement("a");
                    previousAnchor.href = "#PreviousRows";
                    previousAnchor.textContent = "Prev20";
                    td.appendChild(previousAnchor);

                    // Add Next 20 Rows link in the second column
                    const nextAnchor = document.createElement("a");
                    nextAnchor.href = "#NextRows";
                    nextAnchor.textContent = "   Next20   ";
                    td.appendChild(nextAnchor);
                }
        });
        // Handling the scrolling behavior for previous and next rows
        document.getElementById("previousRowsAnchor").addEventListener("click", function (event) {
            event.preventDefault();
            const currentRow = document.querySelectorAll("#myTable tbody tr:nth-child(20n)");
            const previousRow = currentRow[currentRow.length - 2]; // Target the previous 20th row
            if (previousRow) {
                previousRow.scrollIntoView({ behavior: "smooth", block: "start" });
            }
        });

        document.getElementById("nextRowsAnchor").addEventListener("click", function (event) {
            event.preventDefault();
            const currentRow = document.querySelectorAll("#myTable tbody tr:nth-child(20n)");
            const nextRow = currentRow[currentRow.length]; // Target the next 20th row
            if (nextRow) {
                nextRow.scrollIntoView({ behavior: "smooth", block: "start" });
            }
        });
                
    </script>


</body>
</html>
